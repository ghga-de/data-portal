name: Push releases to Docker Hub

on:
  release:
    types: [published]

jobs:
  verify-version:
    name: Verify version
    runs-on: ubuntu-latest
    outputs:
      # export to be used in other jobs
      version: ${{ steps.get-version-tag.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        name: Check out code

      - id: get-version-tag
        name: Get version tag
        run: |
          TAG_VER="${GITHUB_REF##*/}"
          # set as output:
          echo "version: ${TAG_VER}"
          echo "version=${TAG_VER}" >> $GITHUB_OUTPUT

      - name: Ensure that tag complies with semantic versioning.
        uses: matt-usurp/validate-semver@v2
        with:
          version: ${{ steps.get-version-tag.outputs.version }}

      - id: verify-package-version
        name: Verify package version vs tag version
        # package version must be same with tag version
        run: |
          PKG_VER="$(jq -r .version package.json)"
          echo "Package version is $PKG_VER" >&2
          echo "Tag version is ${{ steps.get-version-tag.outputs.version }}" >&2
          if [ "$PKG_VER" != "${{ steps.get-version-tag.outputs.version }}" ]; then
            echo "Package version and tag name mismatch." >&2
            exit 1
          fi

  push-to-docker-hub:
    name: Push to Docker Hub
    runs-on: ubuntu-latest
    needs: verify-version
    steps:
      - uses: actions/checkout@v4
        name: Check out code

      - uses: docker/setup-qemu-action@v2
        name: Set up QEMU

      - uses: docker/setup-buildx-action@v2
        name: Set up Docker Buildx

      - uses: docker/login-action@v2
        name: Login to DockerHub
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/build-push-action@v4
        name: Build and push
        id: docker-build
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          tags: 'ghga/${{ github.event.repository.name }}:${{ needs.verify-version.outputs.version }}'

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/ghga/${{ github.event.repository.name }}:${{ needs.verify-version.outputs.version }}'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Image digest
        run: echo ${{ steps.docker-build.outputs.digest }}
